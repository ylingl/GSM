package utils.task;

import java.io.File;
import java.math.BigDecimal;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Queue;

import logic.data.bean.BeanAvg;
import mvc.spectra.SpectraData;
import mvc.spectra.WarningData;
import utils.DataPoolTools;

/**
 * 数据存储处理，存储为js文件，供前台js调用
 * 
 * @author kin
 *
 */
public class WaringDataFile implements Runnable {

	// 客户端上传的实时监控数据缓冲池
	//public static Queue<List<Double>> monitorDataPool = new LinkedList<List<Double>>();
	
	private String deviceNum;
	
	private boolean isRunning = false;
	// 文件存储根目录
	private static String js_root_dir = "d:\\";
	// 每个文件内的数据行数
	private static final int totalRowsOneFile = 20;

	private static final int sleepTime = 500;// 如果没有数据10秒检查一次
	
	public WaringDataFile(String deviceNum) {
		this.deviceNum = deviceNum;
	}

	// 保存为文件
	@Override
	public void run() {
		
		if(isRunning)
			return;
		
		isRunning = true;
		
		while (DataPoolTools.monitorDeviceMap.get(deviceNum).isWarning()) {
			
			DataPoolTools.clearOverTimeMonitor();//触发清除所有超时的监控
				
			if (DataPoolTools.monitorDataPool.get(deviceNum).isEmpty()){
				try {
					Thread.sleep(sleepTime);
					System.out.println("开始休眠1秒");
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				continue;
			}
			
			SpectraData spectraData = new SpectraData();
			Map<String, ArrayList<Float>> spDataMap = new HashMap<String, ArrayList<Float>>();
			Map<String, ArrayList<WarningData>> warnDataMap = new HashMap<String, ArrayList<WarningData>>();	
			HashMap<String, Queue<ArrayList<Float>>> dataMap = DataPoolTools.monitorDataPool.get(deviceNum);	
			
			for(String key : dataMap.keySet()){
				int depth = dataMap.get(key).size();
				
				//取头一组数据用作显示
				spDataMap.put(key, dataMap.get(key).peek());
				
				List<BeanAvg> pointList = DataPoolTools.monitorDeviceMap.get(deviceNum).getWarningPointMap().get(key);
				
				ArrayList<WarningData> warningDataList = new ArrayList<WarningData>();
				if(DataPoolTools.monitorDeviceMap.get(deviceNum).getWarnDataMap().containsKey(key)) {
					//加载已有的预警数据
					warningDataList = DataPoolTools.monitorDeviceMap.get(deviceNum).getWarnDataMap().get(key);
				}
				
				for(int j = 0; j < depth; j ++) {
					List<Float> spData = DataPoolTools.monitorDataPool.get(deviceNum).get(key).poll();

					if(spData != null && pointList != null && spData.size() == pointList.size()){
						int count = 0;
						float beginFrequency = 0, endFrequency = 0;
						
						for (int i = 0; i < spData.size(); i ++) {
							if(spData.get(i) > pointList.get(i).getY()){
								if(count == 0){
									beginFrequency = pointList.get(i).getX();
								}
								count ++;
							} else {
								if(count >= 2 && beginFrequency > 0){
									count = 0;
									endFrequency = pointList.get(i).getX();
									
									WarningData temp = new WarningData();
									
									BigDecimal start = new BigDecimal(beginFrequency);
									BigDecimal stop = new BigDecimal(endFrequency);
									BigDecimal center = new BigDecimal((beginFrequency + endFrequency) / 2);
									
									temp.setStartFrequency(start.setScale(2, BigDecimal.ROUND_HALF_UP).floatValue());
									temp.setStopFrequency(stop.setScale(2, BigDecimal.ROUND_HALF_UP).floatValue());
									temp.setCenterFrequency(center.setScale(1, BigDecimal.ROUND_HALF_UP).floatValue());
									temp.setCurrentTime((new SimpleDateFormat("HH:mm:ss:SSS")).format(new Date()));
									
									aggregateList(warningDataList, temp);
									
								} else {
									count = 0;
									beginFrequency = 0;
									endFrequency = 0;
								}
							}
						}
					}
				}
				
				warnDataMap.put(key, warningDataList);
				
			}

			spectraData.setSpDataMap(spDataMap);
			spectraData.setWarnDataMap(warnDataMap);
			
			DataPoolTools.monitorDeviceMap.get(deviceNum).setWarnDataMap(warnDataMap);
			DataPoolTools.warningPool.put(deviceNum, spectraData);
			
			//休眠等待
			try {
				//System.out.println("开始休眠"+sleepTime/1000+"秒");
				Thread.sleep(sleepTime);
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
		}
		
		
		DataPoolTools.monitorDeviceMap.remove(deviceNum);
		DataPoolTools.monitorDataPool.remove(deviceNum);

	}

	// 写文本文件

	// 读取文件大小

	// 读取文件列表
	public static ArrayList<String> getDataFileList() {
		File dir = new File(js_root_dir + "data");
		File[] listFile = dir.listFiles();
		ArrayList<String> fileList = new ArrayList<String>();
		for (int i = 0; i < listFile.length; i++) {
			File file = listFile[i];
			if(file.isFile() && file.getName().endsWith(".js"))
				fileList.add(file.getName());
		}
		return fileList;
	}

	private void aggregateList(List<WarningData> warningDataList, WarningData warningData){		
		if(warningDataList.isEmpty()){
			warningDataList.add(warningData);
		} else {
			boolean addEnable = true;
			
			for(int i = 0; i < warningDataList.size(); i ++){
				if(warningData.getCenterFrequency() < warningDataList.get(i).getCenterFrequency()){
					addEnable = false;
					
					warningDataList.add(i, warningData);
					break;
				}
				
				if(warningDataList.get(i).getCenterFrequency() == warningData.getCenterFrequency()) {
					addEnable = false;
					
					warningData.setNumber(warningDataList.get(i).getNumber() + 1);
					warningDataList.set(i, warningData);
					break;
				}
			}
			
			if(addEnable){
				warningDataList.add(warningData);
			}
			
		}
	}
	// 判断文件个数
}
