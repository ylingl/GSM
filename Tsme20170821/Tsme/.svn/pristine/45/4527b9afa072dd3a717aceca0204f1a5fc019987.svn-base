package security.filter;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.springframework.security.authentication.AuthenticationServiceException;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.AuthenticationException;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;

import utils.ValidateCodeTools;

public class MyUsernamePasswordAuthenticationFilter extends UsernamePasswordAuthenticationFilter{
	
	@Override
	public Authentication attemptAuthentication(HttpServletRequest request, HttpServletResponse response) throws AuthenticationException {	
		if (!request.getMethod().equals("POST")){
			throw new AuthenticationServiceException("Authentication method not supported: " + request.getMethod());
        }
		
		//dialogFlag用于判断是否从弹框窗口登录
		HttpSession session = request.getSession();
		String dialogFlag = request.getParameter("dialogFlag");
		session.setAttribute("dialogFlag", dialogFlag);

		//验证用户名及口令
		String username = obtainUsername(request);
		String password = obtainPassword(request);
		
		
		if (username == null){
			username = "";
		}
		if (password == null){
			password = "";
		}
		username = username.trim();
		
		//核查验证码
		checkValidateCode(request);
	
		UsernamePasswordAuthenticationToken authRequest = new UsernamePasswordAuthenticationToken(username, password);
		
		// Allow subclasses to set the "details" property
		setDetails(request, authRequest);
		
		Authentication authentication = getAuthenticationManager().authenticate(authRequest);
		
		return authentication;
	}
	
	protected void checkValidateCode(HttpServletRequest request) {
		//从表单中获取用户填写的验证码
		String validateCode = request.getParameter("validateCode");
		
		ValidateCodeTools validateCodeTools = new ValidateCodeTools();
		
		//系统必须获取到验证码，如果没有则报错
		if(!validateCodeTools.check(validateCode, request)){
    		throw new AuthenticationServiceException("验证码错误，请重新输入");
    	}
    }
}
